#!/opt/bin/php -c/opt/php.ini
<?php declare(strict_types=1, ticks=5);

use hollodotme\FastCGI;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Process\Process;

error_reporting(E_ALL | E_STRICT);
require __DIR__.'/vendor/autoload.php';

$AWS_LAMBDA_RUNTIME_API = \getenv('AWS_LAMBDA_RUNTIME_API');
$timezone = \getenv('TZ');
if (':UTC' === $timezone) {
    \putenv('TZ=Etc/UTC');
}

function start_server(): Process
{
    $process = Process::fromShellCommandline('/opt/sbin/php-fpm -c/opt/php.ini -F -R', null, null, null, null);
    $process->start(function (string $type, string $data): void {
        echo $data;
    });

    return $process;
}

class CGIRequest extends FastCGI\Requests\AbstractRequest
{
    /**
     * @var string
     */
    private $method;

    /**
     * @var string
     */
    private $invocationId;

    /**
     * @var bool
     */
    private $isAlb;

    public function __construct(string $method, string $invocationId, bool $isAlb, string $scriptFilename, string $content)
    {
        parent::__construct($scriptFilename, $content);

        $this->method = $method;
        $this->invocationId = $invocationId;
        $this->isAlb = $isAlb;
    }

    public function getRequestMethod(): string
    {
        return $this->method;
    }

    public function getResponseCallbacks(): array
    {
        return [
            function (FastCGI\Interfaces\ProvidesResponseData $response): void {
                send_response(
                    $this->invocationId,
                    $this->isAlb,
                    $response->getHeader('Status') ?: '200 OK',
                    $response->getBody(),
                    $response->getHeaders()
                );
            },
        ];
    }

    public function getFailureCallbacks(): array
    {
        return [
            function (\Throwable $e): void {
                echo 'ERROR: ' . $e->getMessage();
                send_response($this->invocationId, $this->isAlb, '500 Internal Server Error');
            },
        ];
    }
}

$process = start_server();
$process->waitUntil(function (string $type, string $output): bool {
    return -1 !== \strpos($output, 'ready to handle connections');
});

if (! $process->isRunning()) {
    echo 'PHP-FPM is NOT running';
    die(1);
}

$connection = new FastCGI\SocketConnections\NetworkSocket('127.0.0.1', 9000, 5000, 5000);
$client = new FastCGI\Client($connection);

$apiClient = new GuzzleHttp\Client([
    'handler' => new GuzzleHttp\HandlerStack(new GuzzleHttp\Handler\CurlHandler()),
    'timeout' => 0.05,
]);
$nextRequest = new GuzzleHttp\Psr7\Request(Request::METHOD_GET, "http://$AWS_LAMBDA_RUNTIME_API/2018-06-01/runtime/invocation/next");

$handler = \getenv('_HANDLER');
$filename = \getenv('LAMBDA_TASK_ROOT').DIRECTORY_SEPARATOR.\substr($handler, 0, \strrpos($handler, '.')).'.php';

function send_response(string $invocationId, bool $isALB, string $status = '200 OK', string $body = '', array $headers = []): void
{
    global $AWS_LAMBDA_RUNTIME_API, $apiClient;

    $responseBody = [
        'body' => $body,
        'statusCode' => (int) \preg_replace('/^(\d+).+$/', '$1', $status),
        'headers' => $headers,
        'isBase64Encoded' => false,
    ];

    if ($isALB) {
        $responseBody['statusDescription'] = $status;
    }

    $responseBody = \json_encode($responseBody);
    $responseRequest = new GuzzleHttp\Psr7\Request(
        Request::METHOD_POST,
        "http://$AWS_LAMBDA_RUNTIME_API/2018-06-01/runtime/invocation/$invocationId/response",
        [
            'Content-Type' => 'application/json',
            'Content-Length' => \strlen($responseBody),
        ],
        $responseBody,
    );

    $apiClient->sendAsync($responseRequest, [
        GuzzleHttp\RequestOptions::HTTP_ERRORS => false,
    ]);
}

register_tick_function(function (): void {
    global $client, $process;

    $client->handleReadyResponses(100);
    $process->getExitCode();
});

while (true) {
    $nextInvocation = $apiClient->sendAsync($nextRequest);
    try {
        /** @var \Psr\Http\Message\ResponseInterface $response */
        $response = $nextInvocation->wait();
    } catch (GuzzleHttp\Exception\RequestException $exception) {
        continue;
    }

    /** @var string $invocationId */
    $invocationId = $response->getHeader('lambda-runtime-aws-request-id')[0] ?? null;
    if (null === $invocationId) {
        continue;
    }

    $event = \json_decode((string)$response->getBody(), TRUE);
    if (! isset($event['httpMethod'])) {
        send_response(
            $invocationId,
            false,
            '500 Internal Server Error',
            'Unknown event',
            [
                'Content-Type' => 'application/json',
                'Content-Length' => \strlen($body),
            ]
        );

        \usleep(10);
        continue;
    }

    $body = $event['body'] ?? '';
    if ($event['isBase64Encoded'] ?? false) {
        $body = \base64_decode($body);
    }

    $queryParams = $event['queryStringParameters'] ?? [];
    foreach ($event['multiValueQueryStringParameters'] ?? [] as $name => $values) {
        $queryParams[$name] = \is_array($values) && \count($values) === 1 ? $values[0] : $values;
    }

    $query = \http_build_query($queryParams);
    $cgiRequest = new CGIRequest($event['httpMethod'], $invocationId, \array_key_exists('elb', $event['requestContext'] ?? []), $filename, $body);
    $cgiRequest->setServerPort((int) ($event['headers']['X-Forwarded-Port'] ?? 80));
    $cgiRequest->setCustomVar('QUERY_STRING', $query);
    $cgiRequest->setCustomVar('HTTPS', 'on');
    $cgiRequest->setCustomVar('REMOTE_ADDR', $event['requestContext']['identity']['sourceIp'] ?? '127.0.0.1');

    $cgiRequest->setRequestUri('https://localhost' . $event['path'] . '?' . $query);
    foreach ($event['multiValueHeaders'] ?? $event['headers'] ?? [] as $name => $values) {
        if (\is_array($values)) {
            $values = $values[0];
        }

        if ('content-type' === \mb_strtolower($name)) {
            $cgiRequest->setContentType($values);
        } elseif ('content-length' !== \mb_strtolower($name)) {
            $cgiRequest->setCustomVar('HTTP_' . \str_replace('-', '_', \mb_strtoupper($name)), $values);
        }
    }

    $cgiRequest->setCustomVar('_X_AMZN_TRACE_ID', $response->getHeader('Lambda-Runtime-Trace-Id')[0]);

    $requestId = $client->sendAsyncRequest($cgiRequest);
}
